AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: pipeline démontrant le déploiement d'une application NodeJS via CodeBuild

Parameters:

  ProjectName:
    Description: Nom de l'appplication
    Type: String
    Default: "deploiement-NodeJS-CodeDeploy"
    AllowedPattern: '[A-Za-z0-9-]+'
    
  bucketS3:
    Description: "Bucket contenant les artefacts des services pour leur integration et leur deploiement (codes source et templates des ChangeSet des services)."
    Type: String
    Default: "deploiement-nodejs-codedeploy"
    AllowedPattern: '[a-z0-9\\.-]+'

  EncryptionKeyARN:
    Description: ARN de la cle KMS utilisee pour chiffrer le bucket S3 (imperatif pour l'utilisation avec CodeBuild). Si la cle par defaut "arn:aws:kms:eu-west-1:962109799108:alias/aws/s3" n'existe pas, elle sera creee automatiquement par S3. 
    Type: String
    Default: "arn:aws:kms:eu-west-1:962109799108:alias/aws/s3"
    
  GitHubUser:
    Description: Nom d'utilisateur GitHub.
    Type: String
    Default: "maddoudou22"
    
  GitHubRepository:
    Description: Nom du projet declare dans GitHub.
    Type: String
    Default: "deploiement-NodeJS-CodeDeploy"
    
  GitHubBranch:
    Description: Branch utilisee dans GitHub.
    Type: String
    Default: "master"
    
  GitHubOAuthToken:
    Description: Token Oauth de GitHub. (A generer et recuperer depuis GitHub dans Settings -> Developer Settings -> Personnal Access Tokens)
    Type: String
    Default: ""
    
#  TemplateName:
#    Description: Nom du template CloudFormation pour le deploiement de la stack applicative.
#    Type: String
#    Default: "deploiement-NodeJS-CodeDeploy-template-export.yml"
    
    
Resources:


#------------------------------------------------------------------------------------------------------------
#- Creation du Bucket S3 hebergeant les artefacts compiles et templates du microservice ---------------------
#------------------------------------------------------------------------------------------------------------

  # Creation du bucket lui-meme :
  ArtefactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketS3
      AccessControl: Private

      
  # Policy associee au bucket :
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    #Si la Policy est créée avant le bucket la création de la stack échoue :
    DependsOn: ArtefactsBucket
    Properties:
      Bucket: !Ref bucketS3
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${bucketS3}
              - !Sub arn:aws:s3:::${bucketS3}/*
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
                
                

#------------------------------------------------------------------------------------------------------------
#- Role CloudFormation pour le cycle de vie du ChangeSet ----------------------------------------------------
#------------------------------------------------------------------------------------------------------------

  CloudFormationRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub ${ProjectName}-Role-CFN
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          #
          - Effect: "Allow"
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: 
                - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: !Sub ${ProjectName}-Policy-CFN
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !Join ['',['arn:aws:s3:::',!Ref bucketS3, '/*']]
                  - !Join ['',['arn:aws:s3:::',!Ref bucketS3]]
              -
                Effect: Allow
                Action:
                 - lambda:*
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:lambda:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':function:*'
              -
                Effect: Allow
                Action:
                 - apigateway:*
                Resource: "*"
              -
                Effect: Allow
                Action:
                 - dynamodb:*
                Resource: "*"
              -
                Effect: Allow
                Action: "*"
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::*
              -
                Effect: Allow
                Action:
                 - iam:GetRole
                 - iam:CreateRole
                 - iam:DeleteRole
                 - iam:PutRolePolicy
                 - iam:AttachRolePolicy
                 - iam:DeleteRolePolicy
                 - iam:DetachRolePolicy
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/*'
              -
                Effect: Allow
                Action:
                 - iam:PassRole
                Resource: "*"
              -
                Effect: Allow
                Action:
                 - cloudformation:CreateChangeSet
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
              -
                Effect: Allow
                Action:
                 - codedeploy:CreateDeploymentGroup
                 - codedeploy:CreateDeployment
                 - codedeploy:UpdateDeploymentGroup
                 - codedeploy:DeleteDeploymentGroup
                 - codedeploy:GetDeployment
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:codedeploy:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':deploymentgroup:*'
              -
                Effect: Allow
                Action:
                 - codedeploy:CreateApplication
                 - codedeploy:DeleteApplication
                 - codedeploy:RegisterApplicationRevision
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:codedeploy:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':application:*'
              -
                Effect: Allow
                Action:
                 - codedeploy:GetDeploymentConfig
                Resource: 
                  - !Join
                    - ''
                    - - 'arn:aws:codedeploy:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':deploymentconfig:*'
              -
                Effect: Allow
                Action:
                 - cloudwatch:PutMetricAlarm
                 - cloudwatch:DeleteAlarms
                 - cloudwatch:DescribeAlarms
                Resource: "*"

                
                
#------------------------------------------------------------------------------------------------------------
#- CodeBuild ------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------

  # Role endosse par CodeBuild pour la creation du projet Codebuild :
  BuildProjectRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub ${ProjectName}-CodeBuildRole-CFN
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          #
          - Effect: "Allow"
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 
                - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: !Sub ${ProjectName}-CodeBuildPolicy-CFN
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource:
                 - !Join ['',['arn:aws:s3:::',!Ref bucketS3, '/*']]
                 - !Join ['',['arn:aws:s3:::',!Ref bucketS3]]
              -
                Effect: Allow
                Action:
                  - kms:*
                Resource: !Ref EncryptionKeyARN
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

            
  # Projet Codebuild :
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${ProjectName}-CodeBuild-CFN
      Description: !Sub Projet CodeBuild cree automatiquement pour le pipeline ${ProjectName}-pipeline-CFN
      EncryptionKey: !Ref EncryptionKeyARN
      ServiceRole: !GetAtt BuildProjectRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: linuxContainer
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:8.11.0
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref bucketS3
          - Name: S3_KEY
            Value: !Ref EncryptionKeyARN
          - Name: PROJECT_NAME
            Value: !Ref ProjectName
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
      Tags:
        - Key: Name
          Value: !Ref ProjectName
            
            

#------------------------------------------------------------------------------------------------------------
#- CodePipeline ---------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------

  # Role endosse par CodePipeline pour la creation du pipeline :
  PipelineRole:
    DependsOn: S3BucketPolicy
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-codePipelineRole-CFN
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies: 
        - 
          PolicyName: !Sub ${ProjectName}-CodePipelinePolicy-CFN
          PolicyDocument: 
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - codepipeline:*
                  - iam:ListRoles
                  - cloudformation:Describe*
                  - cloudFormation:List*
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - iam:PassRole
                Resource:
                  - "*"
              -
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Ref EncryptionKeyARN
              -
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:ListBucket
                Resource:
                 - !Join ['',['arn:aws:s3:::',!Ref bucketS3, '/*']]
                 - !Join ['',['arn:aws:s3:::',!Ref bucketS3]]
                  
  # Pipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      Name: !Sub ${ProjectName}-pipeline-CFN #!Ref AWS::StackName
      Stages:
        - 
          Name: Source
          Actions:
            -
              Name: GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SCCheckoutArtifact
              RunOrder: 1
        -
          Name: Build
          Actions:
          -
            Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref BuildProject
            RunOrder: 1
            InputArtifacts:
              - Name: SCCheckoutArtifact
            OutputArtifacts:
              - Name: BuildOutput
        -
          Name: Staging
          Actions:
            - Name: !Sub ${ProjectName}-Stack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                RoleArn: !GetAtt 'CloudFormationRole.Arn'
                ChangeSetName: !Sub ${ProjectName}-changeSet-CFN
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Sub ${ProjectName}-stack-CFN
                Capabilities: CAPABILITY_IAM
#                TemplatePath: !Sub BuildOutput::${TemplateName} #BuildOutput::samtemplate.yaml
                TemplatePath: !Sub BuildOutput::${ProjectName}-template-export.yml
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
            - Name: Changeset-execution
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: !Sub ${ProjectName}-changeSet-CFN
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Sub ${ProjectName}-stack-CFN
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
      ArtifactStore:
        Type: S3
        Location: !Ref bucketS3
        EncryptionKey:
          Id: !Ref EncryptionKeyARN
          Type: KMS
              
              